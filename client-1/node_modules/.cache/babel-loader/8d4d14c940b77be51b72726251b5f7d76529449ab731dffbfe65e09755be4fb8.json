{"ast":null,"code":"var _jsxFileName = \"/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task2.js\",\n  _s = $RefreshSig$();\n// MatchTheColumnGame.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './Task2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatchTheColumnGame = () => {\n  _s();\n  const [columnA, setColumnA] = useState(['Apple', 'Banana', 'Cherry', 'Grapes']);\n  const [columnB, setColumnB] = useState(['Red', 'Yellow', 'Red', 'Purple']);\n  const [selectedCellA, setSelectedCellA] = useState(null);\n  const [selectedCellB, setSelectedCellB] = useState(null);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Create a hashmap to store the correct key-value pairs\n  const correctPairs = {\n    'Apple': 'Red',\n    'Banana': 'Yellow',\n    'Cherry': 'Red',\n    'Grapes': 'Purple'\n  };\n  const checkMatch = useCallback(() => {\n    if (selectedCellA !== null && selectedCellB !== null) {\n      const selectedValueA = columnA[selectedCellA];\n      const selectedValueB = columnB[selectedCellB];\n\n      // Check if the selected pair is correct\n      if (correctPairs[selectedValueA] === selectedValueB) {\n        setCorrectMatches(prevMatches => prevMatches + 1);\n        if (correctMatches === columnA.length - 1) {\n          setGameOver(true);\n        }\n      }\n\n      // Reset selected cells after checking\n      setSelectedCellA(null);\n      setSelectedCellB(null);\n    }\n  }, [selectedCellA, selectedCellB, correctPairs, columnA, columnB, correctMatches]);\n  useEffect(() => {\n    if (selectedCellA !== null && selectedCellB !== null) {\n      checkMatch();\n    }\n  }, [selectedCellA, selectedCellB, checkMatch]);\n  const restartGame = () => {\n    setColumnA(['Apple', 'Banana', 'Cherry', 'Grapes']);\n    setColumnB(['Red', 'Yellow', 'Red', 'Purple']);\n    setSelectedCellA(null);\n    setSelectedCellB(null);\n    setCorrectMatches(0);\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Congratulations! You matched all the pairs.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartGame,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Match the Columns\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: columnA.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${selectedCellA === index ? 'selected' : ''}`,\n            onClick: () => setSelectedCellA(index),\n            children: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: columnB.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${selectedCellB === index ? 'selected' : ''}`,\n            onClick: () => setSelectedCellB(index),\n            children: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(MatchTheColumnGame, \"7hbM4lJl3EzXPyoNh+pJZjft1Sc=\");\n_c = MatchTheColumnGame;\nexport default MatchTheColumnGame;\nvar _c;\n$RefreshReg$(_c, \"MatchTheColumnGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","MatchTheColumnGame","_s","columnA","setColumnA","columnB","setColumnB","selectedCellA","setSelectedCellA","selectedCellB","setSelectedCellB","correctMatches","setCorrectMatches","gameOver","setGameOver","correctPairs","checkMatch","selectedValueA","selectedValueB","prevMatches","length","restartGame","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","map","value","index","_c","$RefreshReg$"],"sources":["/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task2.js"],"sourcesContent":["// MatchTheColumnGame.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './Task2.css';\n\nconst MatchTheColumnGame = () => {\n  const [columnA, setColumnA] = useState(['Apple', 'Banana', 'Cherry', 'Grapes']);\n  const [columnB, setColumnB] = useState(['Red', 'Yellow', 'Red', 'Purple']);\n  const [selectedCellA, setSelectedCellA] = useState(null);\n  const [selectedCellB, setSelectedCellB] = useState(null);\n  const [correctMatches, setCorrectMatches] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Create a hashmap to store the correct key-value pairs\n  const correctPairs = {\n    'Apple': 'Red',\n    'Banana': 'Yellow',\n    'Cherry': 'Red',\n    'Grapes': 'Purple',\n  };\n\n  const checkMatch = useCallback(() => {\n    if (selectedCellA !== null && selectedCellB !== null) {\n      const selectedValueA = columnA[selectedCellA];\n      const selectedValueB = columnB[selectedCellB];\n\n      // Check if the selected pair is correct\n      if (correctPairs[selectedValueA] === selectedValueB) {\n        setCorrectMatches((prevMatches) => prevMatches + 1);\n        if (correctMatches === columnA.length - 1) {\n          setGameOver(true);\n        }\n      }\n\n      // Reset selected cells after checking\n      setSelectedCellA(null);\n      setSelectedCellB(null);\n    }\n  }, [selectedCellA, selectedCellB, correctPairs, columnA, columnB, correctMatches]);\n\n  useEffect(() => {\n    if (selectedCellA !== null && selectedCellB !== null) {\n      checkMatch();\n    }\n  }, [selectedCellA, selectedCellB, checkMatch]);\n\n  const restartGame = () => {\n    setColumnA(['Apple', 'Banana', 'Cherry', 'Grapes']);\n    setColumnB(['Red', 'Yellow', 'Red', 'Purple']);\n    setSelectedCellA(null);\n    setSelectedCellB(null);\n    setCorrectMatches(0);\n    setGameOver(false);\n  };\n\n  return (\n    <div>\n      {gameOver ? (\n        <div>\n          <p>Congratulations! You matched all the pairs.</p>\n          <button onClick={restartGame}>Play Again</button>\n        </div>\n      ) : (\n        <div>\n          <h2>Match the Columns</h2>\n          <div className=\"grid\">\n            <div className=\"column\">\n              {columnA.map((value, index) => (\n                <div\n                  key={index}\n                  className={`cell ${selectedCellA === index ? 'selected' : ''}`}\n                  onClick={() => setSelectedCellA(index)}\n                >\n                  {value}\n                </div>\n              ))}\n            </div>\n            <div className=\"column\">\n              {columnB.map((value, index) => (\n                <div\n                  key={index}\n                  className={`cell ${selectedCellB === index ? 'selected' : ''}`}\n                  onClick={() => setSelectedCellB(index)}\n                >\n                  {value}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MatchTheColumnGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}