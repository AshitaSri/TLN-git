{"ast":null,"code":"var _jsxFileName = \"/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SmallestNumberGame = () => {\n  _s();\n  const [numbers, setNumbers] = useState([]);\n  const [result, setResult] = useState('');\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  useEffect(() => {\n    startNewSet();\n  }, [questionIndex]); // Run this effect whenever questionIndex changes\n\n  const startNewSet = () => {\n    if (questionIndex === 5) {\n      // End the game after 10 sets of questions\n      setEndTime(new Date());\n      calculateScore();\n    } else {\n      // Generate new random numbers for the next set of questions\n      const newNumbers = Array.from({\n        length: 5\n      }, () => Math.floor(Math.random() * 100) + 1);\n      setNumbers(newNumbers);\n      setResult('');\n      setStartTime(new Date());\n    }\n  };\n  const checkSmallestNumber = (selectedNumber, selectedIndex) => {\n    const isSmallest = numbers.every((number, index) => index === selectedIndex || selectedNumber <= number);\n    if (isSmallest) {\n      setResult('YES! You are right!');\n    } else {\n      setResult('OOPS! You are wrong.');\n    }\n\n    // Move to the next set of questions\n    setQuestionIndex(prevIndex => prevIndex + 1);\n  };\n  const calculateScore = () => {\n    // Calculate total time and score after 10 sets of questions\n    const totalTime = (endTime - startTime) / 1000; // in seconds\n    const score = Math.round(10 / totalTime * 100); // simple scoring, adjust as needed\n    setResult(`Game Over! Total time: ${totalTime.toFixed(2)} seconds. Your score: ${score}`);\n  };\n  const restartGame = () => {\n    setQuestionIndex(0);\n    setResult('');\n    setStartTime(new Date());\n    setEndTime(null);\n  };\n  const goBack = () => {\n    // Go back to the previous set of questions\n    setQuestionIndex(prevIndex => Math.max(prevIndex - 1, 0));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Select the Smallest Number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        marginTop: '20px'\n      },\n      children: numbers.map((number, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => checkSmallestNumber(number, index),\n        children: number\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartGame,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goBack,\n        disabled: questionIndex === 0,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), questionIndex === 10 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total time: \", (endTime - startTime) / 1000, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your score: \", Math.round(10 / ((endTime - startTime) / 1000) * 100)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(SmallestNumberGame, \"fhe4ejRi/14MNFrKI7C7WR3KTUQ=\");\n_c = SmallestNumberGame;\nexport default SmallestNumberGame;\nvar _c;\n$RefreshReg$(_c, \"SmallestNumberGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SmallestNumberGame","_s","numbers","setNumbers","result","setResult","questionIndex","setQuestionIndex","startTime","setStartTime","endTime","setEndTime","startNewSet","Date","calculateScore","newNumbers","Array","from","length","Math","floor","random","checkSmallestNumber","selectedNumber","selectedIndex","isSmallest","every","number","index","prevIndex","totalTime","score","round","toFixed","restartGame","goBack","max","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","marginTop","map","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SmallestNumberGame = () => {\n  const [numbers, setNumbers] = useState([]);\n  const [result, setResult] = useState('');\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n\n  useEffect(() => {\n    startNewSet();\n  }, [questionIndex]); // Run this effect whenever questionIndex changes\n\n  const startNewSet = () => {\n    if (questionIndex === 5) {\n      // End the game after 10 sets of questions\n      setEndTime(new Date());\n      calculateScore();\n    } else {\n      // Generate new random numbers for the next set of questions\n      const newNumbers = Array.from({ length: 5 }, () => Math.floor(Math.random() * 100) + 1);\n      setNumbers(newNumbers);\n      setResult('');\n      setStartTime(new Date());\n    }\n  };\n\n  const checkSmallestNumber = (selectedNumber, selectedIndex) => {\n    const isSmallest = numbers.every(\n      (number, index) => index === selectedIndex || selectedNumber <= number\n    );\n\n    if (isSmallest) {\n      setResult('YES! You are right!');\n    } else {\n      setResult('OOPS! You are wrong.');\n    }\n\n    // Move to the next set of questions\n    setQuestionIndex(prevIndex => prevIndex + 1);\n  };\n\n  const calculateScore = () => {\n    // Calculate total time and score after 10 sets of questions\n    const totalTime = (endTime - startTime) / 1000; // in seconds\n    const score = Math.round((10 / totalTime) * 100); // simple scoring, adjust as needed\n    setResult(`Game Over! Total time: ${totalTime.toFixed(2)} seconds. Your score: ${score}`);\n  };\n\n  const restartGame = () => {\n    setQuestionIndex(0);\n    setResult('');\n    setStartTime(new Date());\n    setEndTime(null);\n  };\n\n  const goBack = () => {\n    // Go back to the previous set of questions\n    setQuestionIndex(prevIndex => Math.max(prevIndex - 1, 0));\n  };\n\n  return (\n    <div>\n      <h1>Select the Smallest Number</h1>\n      <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '20px' }}>\n        {numbers.map((number, index) => (\n          <button key={index} onClick={() => checkSmallestNumber(number, index)}>\n            {number}\n          </button>\n        ))}\n      </div>\n      <p>{result}</p>\n      <div>\n        <button onClick={restartGame}>Restart Game</button>\n        <button onClick={goBack} disabled={questionIndex === 0}>Go Back</button>\n      </div>\n      {questionIndex === 10 && (\n        <div>\n          <p>Game Over!</p>\n          <p>Total time: {(endTime - startTime) / 1000} seconds</p>\n          <p>Your score: {Math.round((10 / ((endTime - startTime) / 1000)) * 100)}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SmallestNumberGame;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACde,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACN,aAAa,CAAC,CAAC,CAAC,CAAC;;EAErB,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIN,aAAa,KAAK,CAAC,EAAE;MACvB;MACAK,UAAU,CAAC,IAAIE,IAAI,CAAC,CAAC,CAAC;MACtBC,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM;MACL;MACA,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAE,CAAC,EAAE,MAAMC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;MACvFlB,UAAU,CAACY,UAAU,CAAC;MACtBV,SAAS,CAAC,EAAE,CAAC;MACbI,YAAY,CAAC,IAAII,IAAI,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;EAED,MAAMS,mBAAmB,GAAGA,CAACC,cAAc,EAAEC,aAAa,KAAK;IAC7D,MAAMC,UAAU,GAAGvB,OAAO,CAACwB,KAAK,CAC9B,CAACC,MAAM,EAAEC,KAAK,KAAKA,KAAK,KAAKJ,aAAa,IAAID,cAAc,IAAII,MAClE,CAAC;IAED,IAAIF,UAAU,EAAE;MACdpB,SAAS,CAAC,qBAAqB,CAAC;IAClC,CAAC,MAAM;MACLA,SAAS,CAAC,sBAAsB,CAAC;IACnC;;IAEA;IACAE,gBAAgB,CAACsB,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMf,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACA,MAAMgB,SAAS,GAAG,CAACpB,OAAO,GAAGF,SAAS,IAAI,IAAI,CAAC,CAAC;IAChD,MAAMuB,KAAK,GAAGZ,IAAI,CAACa,KAAK,CAAE,EAAE,GAAGF,SAAS,GAAI,GAAG,CAAC,CAAC,CAAC;IAClDzB,SAAS,CAAE,0BAAyByB,SAAS,CAACG,OAAO,CAAC,CAAC,CAAE,yBAAwBF,KAAM,EAAC,CAAC;EAC3F,CAAC;EAED,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxB3B,gBAAgB,CAAC,CAAC,CAAC;IACnBF,SAAS,CAAC,EAAE,CAAC;IACbI,YAAY,CAAC,IAAII,IAAI,CAAC,CAAC,CAAC;IACxBF,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMwB,MAAM,GAAGA,CAAA,KAAM;IACnB;IACA5B,gBAAgB,CAACsB,SAAS,IAAIV,IAAI,CAACiB,GAAG,CAACP,SAAS,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3D,CAAC;EAED,oBACE9B,OAAA;IAAAsC,QAAA,gBACEtC,OAAA;MAAAsC,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnC1C,OAAA;MAAK2C,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,cAAc;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAR,QAAA,EAChFnC,OAAO,CAAC4C,GAAG,CAAC,CAACnB,MAAM,EAAEC,KAAK,kBACzB7B,OAAA;QAAoBgD,OAAO,EAAEA,CAAA,KAAMzB,mBAAmB,CAACK,MAAM,EAAEC,KAAK,CAAE;QAAAS,QAAA,EACnEV;MAAM,GADIC,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN1C,OAAA;MAAAsC,QAAA,EAAIjC;IAAM;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACf1C,OAAA;MAAAsC,QAAA,gBACEtC,OAAA;QAAQgD,OAAO,EAAEb,WAAY;QAAAG,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnD1C,OAAA;QAAQgD,OAAO,EAAEZ,MAAO;QAACa,QAAQ,EAAE1C,aAAa,KAAK,CAAE;QAAA+B,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,EACLnC,aAAa,KAAK,EAAE,iBACnBP,OAAA;MAAAsC,QAAA,gBACEtC,OAAA;QAAAsC,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACjB1C,OAAA;QAAAsC,QAAA,GAAG,cAAY,EAAC,CAAC3B,OAAO,GAAGF,SAAS,IAAI,IAAI,EAAC,UAAQ;MAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACzD1C,OAAA;QAAAsC,QAAA,GAAG,cAAY,EAAClB,IAAI,CAACa,KAAK,CAAE,EAAE,IAAI,CAACtB,OAAO,GAAGF,SAAS,IAAI,IAAI,CAAC,GAAI,GAAG,CAAC;MAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxC,EAAA,CAnFID,kBAAkB;AAAAiD,EAAA,GAAlBjD,kBAAkB;AAqFxB,eAAeA,kBAAkB;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}