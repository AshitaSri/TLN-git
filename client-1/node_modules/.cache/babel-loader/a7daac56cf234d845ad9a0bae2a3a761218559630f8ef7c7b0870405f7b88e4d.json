{"ast":null,"code":"var _jsxFileName = \"/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task2.js\",\n  _s = $RefreshSig$();\n// // Task2.js\n\n// import React, { useState, useEffect } from 'react';\n// import './Task2.css';\n\n// const MatchTheColumnGame = () => {\n//   const [columnA, setColumnA] = useState(['Apple', 'Banana', 'Cherry', 'Grapes']);\n//   const [columnB, setColumnB] = useState(['Red', 'Yellow', 'Red', 'Purple']);\n//   const [selectedCellA, setSelectedCellA] = useState(null);\n//   const [selectedCellB, setSelectedCellB] = useState(null);\n//   const [correctMatches, setCorrectMatches] = useState([]);\n\n//   const handleCellClick = (index, column) => {\n//     if (column === 'A') {\n//       setSelectedCellA(index);\n//     } else if (column === 'B') {\n//       setSelectedCellB(index);\n//     }\n//   };\n\n//   const checkMatch = () => {\n//     if (selectedCellA !== null && selectedCellB !== null) {\n//       const pairs = {\n//         'Apple': 'Red',\n//         'Banana': 'Yellow',\n//         'Cherry': 'Red',\n//         'Grapes': 'Purple'\n//       };\n\n//       return pairs[columnA[selectedCellA]] === columnB[selectedCellB];\n//     }\n//     return false;\n//   };\n\n//   useEffect(() => {\n//     if (checkMatch()) {\n//       setCorrectMatches([...correctMatches, selectedCellA, selectedCellB]);\n//     }\n//   }, [selectedCellA, selectedCellB, correctMatches]);\n\n//   const resetSelection = () => {\n//     setSelectedCellA(null);\n//     setSelectedCellB(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Match the Columns</h2>\n//       <div className=\"grid\">\n//         <div className=\"column\">\n//           {columnA.map((value, index) => (\n//             <div\n//               key={index}\n//               className={`cell ${selectedCellA === index ? 'selected' : ''}`}\n//               onClick={() => handleCellClick(index, 'A')}\n//             >\n//               {value}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"column\">\n//           {columnB.map((value, index) => (\n//             <div\n//               key={index}\n//               className={`cell ${selectedCellB === index ? 'selected' : ''} ${correctMatches.includes(index) ? 'correct-match' : ''}`}\n//               onClick={() => handleCellClick(index, 'B')}\n//             >\n//               {value}\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//       {checkMatch() ? (\n//         <p>Correct Match!</p>\n//       ) : (\n//         selectedCellA !== null && selectedCellB !== null && <p>Incorrect Match. Try Again!</p>\n//       )}\n//       <button onClick={() => { resetSelection(); setCorrectMatches([]); }}>Reset Selection</button>\n//     </div>\n//   );\n// };\n\n// export default MatchTheColumnGame;\n\n// Task2.js\n\nimport React, { useState, useEffect } from 'react';\nimport './Task2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatchTheColumnGame = () => {\n  _s();\n  const [columnA, setColumnA] = useState(['Apple', 'Banana', 'Cherry', 'Grapes']);\n  const [columnB, setColumnB] = useState(['Red', 'Yellow', 'Red', 'Purple']);\n  const [selectedCellA, setSelectedCellA] = useState(null);\n  const [selectedCellB, setSelectedCellB] = useState(null);\n  const [correctMatches, setCorrectMatches] = useState([]);\n  const [gameFinished, setGameFinished] = useState(false);\n  const handleCellClick = (index, column) => {\n    if (!gameFinished) {\n      if (column === 'A') {\n        setSelectedCellA(index);\n      } else if (column === 'B') {\n        setSelectedCellB(index);\n      }\n    }\n  };\n  const checkMatch = () => {\n    if (selectedCellA !== null && selectedCellB !== null) {\n      const pairs = {\n        'Apple': 'Red',\n        'Banana': 'Yellow',\n        'Cherry': 'Red',\n        'Grapes': 'Purple'\n      };\n      const isMatch = pairs[columnA[selectedCellA]] === columnB[selectedCellB];\n      if (isMatch) {\n        setCorrectMatches([...correctMatches, selectedCellA, selectedCellB]);\n      }\n      return isMatch;\n    }\n    return false;\n  };\n  useEffect(() => {\n    if (checkMatch()) {\n      if (correctMatches.length === columnA.length * 2 - 2) {\n        // All matches found, game finished\n        setGameFinished(true);\n      }\n    }\n  }, [selectedCellA, selectedCellB, correctMatches, columnA.length]);\n  const resetSelection = () => {\n    setSelectedCellA(null);\n    setSelectedCellB(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Match the Columns\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: columnA.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${selectedCellA === index ? 'selected' : ''}`,\n          onClick: () => handleCellClick(index, 'A'),\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: columnB.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${selectedCellB === index ? 'selected' : ''} ${correctMatches.includes(index) ? 'correct-match' : ''}`,\n          onClick: () => handleCellClick(index, 'B'),\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), gameFinished ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Congratulations! You've completed the game.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this) : checkMatch() ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Correct Match!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this) : selectedCellA !== null && selectedCellB !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Incorrect Match. Try Again!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 61\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        resetSelection();\n        setCorrectMatches([]);\n        setGameFinished(false);\n      },\n      children: \"Reset Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(MatchTheColumnGame, \"YBQ2QWFz5FJhTB67fOU4hywcxyY=\");\n_c = MatchTheColumnGame;\nexport default MatchTheColumnGame;\nvar _c;\n$RefreshReg$(_c, \"MatchTheColumnGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MatchTheColumnGame","_s","columnA","setColumnA","columnB","setColumnB","selectedCellA","setSelectedCellA","selectedCellB","setSelectedCellB","correctMatches","setCorrectMatches","gameFinished","setGameFinished","handleCellClick","index","column","checkMatch","pairs","isMatch","length","resetSelection","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","value","onClick","includes","_c","$RefreshReg$"],"sources":["/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task2.js"],"sourcesContent":["// // Task2.js\n\n// import React, { useState, useEffect } from 'react';\n// import './Task2.css';\n\n// const MatchTheColumnGame = () => {\n//   const [columnA, setColumnA] = useState(['Apple', 'Banana', 'Cherry', 'Grapes']);\n//   const [columnB, setColumnB] = useState(['Red', 'Yellow', 'Red', 'Purple']);\n//   const [selectedCellA, setSelectedCellA] = useState(null);\n//   const [selectedCellB, setSelectedCellB] = useState(null);\n//   const [correctMatches, setCorrectMatches] = useState([]);\n\n//   const handleCellClick = (index, column) => {\n//     if (column === 'A') {\n//       setSelectedCellA(index);\n//     } else if (column === 'B') {\n//       setSelectedCellB(index);\n//     }\n//   };\n\n//   const checkMatch = () => {\n//     if (selectedCellA !== null && selectedCellB !== null) {\n//       const pairs = {\n//         'Apple': 'Red',\n//         'Banana': 'Yellow',\n//         'Cherry': 'Red',\n//         'Grapes': 'Purple'\n//       };\n\n//       return pairs[columnA[selectedCellA]] === columnB[selectedCellB];\n//     }\n//     return false;\n//   };\n\n//   useEffect(() => {\n//     if (checkMatch()) {\n//       setCorrectMatches([...correctMatches, selectedCellA, selectedCellB]);\n//     }\n//   }, [selectedCellA, selectedCellB, correctMatches]);\n\n//   const resetSelection = () => {\n//     setSelectedCellA(null);\n//     setSelectedCellB(null);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Match the Columns</h2>\n//       <div className=\"grid\">\n//         <div className=\"column\">\n//           {columnA.map((value, index) => (\n//             <div\n//               key={index}\n//               className={`cell ${selectedCellA === index ? 'selected' : ''}`}\n//               onClick={() => handleCellClick(index, 'A')}\n//             >\n//               {value}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"column\">\n//           {columnB.map((value, index) => (\n//             <div\n//               key={index}\n//               className={`cell ${selectedCellB === index ? 'selected' : ''} ${correctMatches.includes(index) ? 'correct-match' : ''}`}\n//               onClick={() => handleCellClick(index, 'B')}\n//             >\n//               {value}\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//       {checkMatch() ? (\n//         <p>Correct Match!</p>\n//       ) : (\n//         selectedCellA !== null && selectedCellB !== null && <p>Incorrect Match. Try Again!</p>\n//       )}\n//       <button onClick={() => { resetSelection(); setCorrectMatches([]); }}>Reset Selection</button>\n//     </div>\n//   );\n// };\n\n// export default MatchTheColumnGame;\n\n\n// Task2.js\n\nimport React, { useState, useEffect } from 'react';\nimport './Task2.css';\n\nconst MatchTheColumnGame = () => {\n  const [columnA, setColumnA] = useState(['Apple', 'Banana', 'Cherry', 'Grapes']);\n  const [columnB, setColumnB] = useState(['Red', 'Yellow', 'Red', 'Purple']);\n  const [selectedCellA, setSelectedCellA] = useState(null);\n  const [selectedCellB, setSelectedCellB] = useState(null);\n  const [correctMatches, setCorrectMatches] = useState([]);\n  const [gameFinished, setGameFinished] = useState(false);\n\n  const handleCellClick = (index, column) => {\n    if (!gameFinished) {\n      if (column === 'A') {\n        setSelectedCellA(index);\n      } else if (column === 'B') {\n        setSelectedCellB(index);\n      }\n    }\n  };\n\n  const checkMatch = () => {\n    if (selectedCellA !== null && selectedCellB !== null) {\n      const pairs = {\n        'Apple': 'Red',\n        'Banana': 'Yellow',\n        'Cherry': 'Red',\n        'Grapes': 'Purple'\n      };\n\n      const isMatch = pairs[columnA[selectedCellA]] === columnB[selectedCellB];\n\n      if (isMatch) {\n        setCorrectMatches([...correctMatches, selectedCellA, selectedCellB]);\n      }\n\n      return isMatch;\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    if (checkMatch()) {\n      if (correctMatches.length === columnA.length * 2 - 2) {\n        // All matches found, game finished\n        setGameFinished(true);\n      }\n    }\n  }, [selectedCellA, selectedCellB, correctMatches, columnA.length]);\n\n  const resetSelection = () => {\n    setSelectedCellA(null);\n    setSelectedCellB(null);\n  };\n\n  return (\n    <div>\n      <h2>Match the Columns</h2>\n      <div className=\"grid\">\n        <div className=\"column\">\n          {columnA.map((value, index) => (\n            <div\n              key={index}\n              className={`cell ${selectedCellA === index ? 'selected' : ''}`}\n              onClick={() => handleCellClick(index, 'A')}\n            >\n              {value}\n            </div>\n          ))}\n        </div>\n        <div className=\"column\">\n          {columnB.map((value, index) => (\n            <div\n              key={index}\n              className={`cell ${selectedCellB === index ? 'selected' : ''} ${correctMatches.includes(index) ? 'correct-match' : ''}`}\n              onClick={() => handleCellClick(index, 'B')}\n            >\n              {value}\n            </div>\n          ))}\n        </div>\n      </div>\n      {gameFinished ? (\n        <p>Congratulations! You've completed the game.</p>\n      ) : checkMatch() ? (\n        <p>Correct Match!</p>\n      ) : (\n        selectedCellA !== null && selectedCellB !== null && <p>Incorrect Match. Try Again!</p>\n      )}\n      <button onClick={() => { resetSelection(); setCorrectMatches([]); setGameFinished(false); }}>Reset Selection</button>\n    </div>\n  );\n};\n\nexport default MatchTheColumnGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}