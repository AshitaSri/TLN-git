{"ast":null,"code":"var _jsxFileName = \"/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task2.js\",\n  _s = $RefreshSig$();\n// MatchTheColumnGame.js\n\nimport React, { useState } from 'react';\nimport '.Task2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatchTheColumnGame = () => {\n  _s();\n  const [columnA, setColumnA] = useState(['Apple', 'Banana', 'Cherry', 'Grapes']);\n  const [columnB, setColumnB] = useState(['Red', 'Yellow', 'Red', 'Purple']);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [chancesLeft, setChancesLeft] = useState(3);\n  const [gameOver, setGameOver] = useState(false);\n  const handleCellClick = index => {\n    if (selectedCells.length < 2 && !selectedCells.includes(index) && !gameOver) {\n      setSelectedCells([...selectedCells, index]);\n\n      // Check for a match when two cells are selected\n      if (selectedCells.length === 1) {\n        setTimeout(() => checkForMatch(), 500);\n      }\n    }\n  };\n  const checkForMatch = () => {\n    const [indexA, indexB] = selectedCells;\n    const match = columnB[indexA] === columnB[indexB];\n    if (match) {\n      // Set a match, celebrate, and reset selected cells\n      setSelectedCells([]);\n      if (selectedCells.length === columnA.length - 1) {\n        setGameOver(true);\n      }\n    } else {\n      // No match, reduce chances\n      setChancesLeft(prevChances => prevChances - 1);\n      if (chancesLeft === 1) {\n        setGameOver(true);\n      }\n    }\n  };\n  const restartGame = () => {\n    setColumnA(['Apple', 'Banana', 'Cherry', 'Grapes']);\n    setColumnB(['Red', 'Yellow', 'Red', 'Purple']);\n    setSelectedCells([]);\n    setChancesLeft(3);\n    setGameOver(false);\n  };\n  const renderCell = (value, index) => {\n    const isSelected = selectedCells.includes(index);\n    const isMatched = selectedCells.length === 2 && columnB[selectedCells[0]] === columnB[selectedCells[1]];\n    let cellClass = 'cell';\n    if (isSelected) cellClass += ' selected';\n    if (isMatched) cellClass += ' matched';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cellClass,\n      onClick: () => handleCellClick(index),\n      children: [isSelected || isMatched ? value : '?', isMatched && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 23\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chancesLeft > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Well done! Try another.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          children: \"Try Another\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Match the Columns\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Chances Left: \", chancesLeft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: columnA.map((value, index) => renderCell(value, index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: columnB.map((value, index) => renderCell(value, index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(MatchTheColumnGame, \"9egGOGqJgQ8xornAX7VoXc6a824=\");\n_c = MatchTheColumnGame;\nexport default MatchTheColumnGame;\nvar _c;\n$RefreshReg$(_c, \"MatchTheColumnGame\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MatchTheColumnGame","_s","columnA","setColumnA","columnB","setColumnB","selectedCells","setSelectedCells","chancesLeft","setChancesLeft","gameOver","setGameOver","handleCellClick","index","length","includes","setTimeout","checkForMatch","indexA","indexB","match","prevChances","restartGame","renderCell","value","isSelected","isMatched","cellClass","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task2.js"],"sourcesContent":["// MatchTheColumnGame.js\n\nimport React, { useState } from 'react';\nimport '.Task2.css';\n\nconst MatchTheColumnGame = () => {\n  const [columnA, setColumnA] = useState(['Apple', 'Banana', 'Cherry', 'Grapes']);\n  const [columnB, setColumnB] = useState(['Red', 'Yellow', 'Red', 'Purple']);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [chancesLeft, setChancesLeft] = useState(3);\n  const [gameOver, setGameOver] = useState(false);\n\n  const handleCellClick = (index) => {\n    if (selectedCells.length < 2 && !selectedCells.includes(index) && !gameOver) {\n      setSelectedCells([...selectedCells, index]);\n\n      // Check for a match when two cells are selected\n      if (selectedCells.length === 1) {\n        setTimeout(() => checkForMatch(), 500);\n      }\n    }\n  };\n\n  const checkForMatch = () => {\n    const [indexA, indexB] = selectedCells;\n    const match = columnB[indexA] === columnB[indexB];\n\n    if (match) {\n      // Set a match, celebrate, and reset selected cells\n      setSelectedCells([]);\n      if (selectedCells.length === columnA.length - 1) {\n        setGameOver(true);\n      }\n    } else {\n      // No match, reduce chances\n      setChancesLeft((prevChances) => prevChances - 1);\n      if (chancesLeft === 1) {\n        setGameOver(true);\n      }\n    }\n  };\n\n  const restartGame = () => {\n    setColumnA(['Apple', 'Banana', 'Cherry', 'Grapes']);\n    setColumnB(['Red', 'Yellow', 'Red', 'Purple']);\n    setSelectedCells([]);\n    setChancesLeft(3);\n    setGameOver(false);\n  };\n\n  const renderCell = (value, index) => {\n    const isSelected = selectedCells.includes(index);\n    const isMatched = selectedCells.length === 2 && columnB[selectedCells[0]] === columnB[selectedCells[1]];\n\n    let cellClass = 'cell';\n    if (isSelected) cellClass += ' selected';\n    if (isMatched) cellClass += ' matched';\n\n    return (\n      <div key={index} className={cellClass} onClick={() => handleCellClick(index)}>\n        {isSelected || isMatched ? value : '?'}\n        {isMatched && <div className=\"line\" />}\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      {gameOver ? (\n        <div>\n          {chancesLeft > 0 ? (\n            <p>Well done! Try another.</p>\n          ) : (\n            <div>\n              <p>Try again!</p>\n              <button onClick={restartGame}>Try Another</button>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          <h2>Match the Columns</h2>\n          <p>Chances Left: {chancesLeft}</p>\n          <div className=\"grid\">\n            <div className=\"column\">{columnA.map((value, index) => renderCell(value, index))}</div>\n            <div className=\"column\">{columnB.map((value, index) => renderCell(value, index))}</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MatchTheColumnGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}