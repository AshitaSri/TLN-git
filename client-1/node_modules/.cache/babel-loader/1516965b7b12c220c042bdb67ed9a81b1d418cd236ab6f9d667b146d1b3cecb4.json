{"ast":null,"code":"var _jsxFileName = \"/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Task1.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SmallestNumberGame = () => {\n  _s();\n  const [numbers, setNumbers] = useState([]);\n  const [result, setResult] = useState('');\n  const [questionIndex, setCompletedQuestions] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionsCompleted, setQuestionsCompleted] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const navigate = useNavigate();\n\n  // Declare a ref to hold the timeout ID\n  const resultTimeout = useRef(null);\n  useEffect(() => {\n    const fetchCompletedQuestions = async () => {\n      try {\n        const token = window.localStorage.getItem('token');\n        const response = await fetch('http://localhost:5000/getCompletedQuestions', {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data && data.completed !== undefined) {\n          // Update questionsCompleted state with the value from the database\n          setQuestionsCompleted(data.completed);\n        }\n      } catch (error) {\n        console.error('Error fetching completed questions:', error);\n      }\n    };\n\n    // Fetch completed questions when the component mounts\n    fetchCompletedQuestions();\n  }, [questionIndex]); // Include questionIndex in the dependency array\n\n  // Clear timeout when the component unmounts\n  useEffect(() => {\n    return () => {\n      clearTimeout(resultTimeout.current);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const calculateScore = () => {\n    if (endTime) {\n      const accuracy = correctAnswers / 5 * 100;\n      setResult(`Game Over! Your score: ${correctAnswers}/5\\nAccuracy: ${accuracy.toFixed(0)}%`);\n    }\n  };\n  const startNewSet = useCallback(() => {\n    if (questionIndex === 5) {\n      setEndTime(new Date());\n      calculateScore();\n    } else {\n      const newNumbers = Array.from({\n        length: 5\n      }, () => Math.floor(Math.random() * 100) + 1);\n      setNumbers(newNumbers);\n      setResult('');\n      setShowResult(false);\n      setStartTime(new Date());\n    }\n  }, [questionIndex, calculateScore]); // Include calculateScore in the dependency array\n\n  useEffect(() => {\n    const handleGameStart = () => {\n      if (gameStarted && questionIndex <= 4) {\n        startNewSet();\n      }\n    };\n    handleGameStart();\n  }, [questionIndex, gameStarted, startNewSet]);\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = (seconds % 60).toFixed(2);\n    return `${minutes} min ${remainingSeconds} seconds`;\n  };\n  const checkSmallestNumber = (selectedNumber, selectedIndex) => {\n    const isSmallest = numbers.every((number, index) => index === selectedIndex || selectedNumber <= number);\n    if (isSmallest) {\n      setResult('YES! You are right!');\n      setCorrectAnswers(prevCorrectAnswers => prevCorrectAnswers + 1);\n      setCompletedQuestions(prevCompletedQuestions => prevCompletedQuestions + 1);\n    } else {\n      setResult('OOPS! You are wrong.');\n    }\n    setShowResult(true);\n\n    // Clear the previous timeout\n    clearTimeout(resultTimeout.current);\n\n    // Set a new timeout to hide the result after 1 second\n    resultTimeout.current = setTimeout(() => {\n      setShowResult(false);\n      setCompletedQuestions(prevIndex => prevIndex + 1);\n    }, 1000);\n  };\n  const restartGame = () => {\n    setCompletedQuestions(0);\n    setResult('');\n    setCorrectAnswers(0);\n    setStartTime(new Date());\n    setEndTime(null);\n    setGameStarted(true);\n    setShowResult(false); // Reset the showResult state to false\n    startNewSet();\n  };\n  const goBack = async () => {\n    try {\n      const token = window.localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/saveCompletedQuestions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          task: 'Task1',\n          completed: questionsCompleted\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      navigate('/dashboard', {\n        state: {\n          questionsCompleted\n        }\n      });\n    } catch (error) {\n      console.error('Error saving completed questions:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [!gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Select the Smallest Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Test your skills by identifying the smallest number in each set of numbers. Click on the number you believe is the smallest. Can you get them all right?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this), gameStarted && questionIndex <= 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select the smallest number !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-buttons\",\n        children: numbers.map((number, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => checkSmallestNumber(number, index),\n          children: number\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: showResult && result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), questionIndex === 5 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), endTime && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total time: \", formatTime((endTime - startTime) / 1000)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Your score: \", correctAnswers, \"/5\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Accuracy: \", correctAnswers / 5 * 100, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartGame,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), !gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"start-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-button\",\n        onClick: restartGame,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(SmallestNumberGame, \"ODAikjJdsNJ/9p/HDoJtCYUmyyI=\", false, function () {\n  return [useNavigate];\n});\n_c = SmallestNumberGame;\nexport default SmallestNumberGame;\nvar _c;\n$RefreshReg$(_c, \"SmallestNumberGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useNavigate","jsxDEV","_jsxDEV","SmallestNumberGame","_s","numbers","setNumbers","result","setResult","questionIndex","setCompletedQuestions","correctAnswers","setCorrectAnswers","questionsCompleted","setQuestionsCompleted","startTime","setStartTime","endTime","setEndTime","gameStarted","setGameStarted","showResult","setShowResult","navigate","resultTimeout","fetchCompletedQuestions","token","window","localStorage","getItem","response","fetch","method","headers","Authorization","ok","Error","status","data","json","completed","undefined","error","console","clearTimeout","current","calculateScore","accuracy","toFixed","startNewSet","Date","newNumbers","Array","from","length","Math","floor","random","handleGameStart","formatTime","seconds","minutes","remainingSeconds","checkSmallestNumber","selectedNumber","selectedIndex","isSmallest","every","number","index","prevCorrectAnswers","prevCompletedQuestions","setTimeout","prevIndex","restartGame","goBack","body","JSON","stringify","task","log","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["/Users/ashitasrivastava/Desktop/Telangana Hackathon/client/src/components/Task1.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Task1.css';\n\nconst SmallestNumberGame = () => {\n  const [numbers, setNumbers] = useState([]);\n  const [result, setResult] = useState('');\n  const [questionIndex, setCompletedQuestions] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [questionsCompleted, setQuestionsCompleted] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const navigate = useNavigate();\n\n  // Declare a ref to hold the timeout ID\n  const resultTimeout = useRef(null);\n\n  useEffect(() => {\n    const fetchCompletedQuestions = async () => {\n      try {\n        const token = window.localStorage.getItem('token');\n        const response = await fetch('http://localhost:5000/getCompletedQuestions', {\n          method: 'GET',\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (data && data.completed !== undefined) {\n          // Update questionsCompleted state with the value from the database\n          setQuestionsCompleted(data.completed);\n        }\n      } catch (error) {\n        console.error('Error fetching completed questions:', error);\n      }\n    };\n\n    // Fetch completed questions when the component mounts\n    fetchCompletedQuestions();\n  }, [questionIndex]); // Include questionIndex in the dependency array\n\n  // Clear timeout when the component unmounts\n  useEffect(() => {\n    return () => {\n      clearTimeout(resultTimeout.current);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const calculateScore = () => {\n    if (endTime) {\n      const accuracy = (correctAnswers / 5) * 100;\n      setResult(`Game Over! Your score: ${correctAnswers}/5\\nAccuracy: ${accuracy.toFixed(0)}%`);\n    }\n  };\n\n  const startNewSet = useCallback(() => {\n    if (questionIndex === 5) {\n      setEndTime(new Date());\n      calculateScore();\n    } else {\n      const newNumbers = Array.from({ length: 5 }, () => Math.floor(Math.random() * 100) + 1);\n      setNumbers(newNumbers);\n      setResult('');\n      setShowResult(false);\n      setStartTime(new Date());\n    }\n  }, [questionIndex, calculateScore]); // Include calculateScore in the dependency array\n\n  useEffect(() => {\n    const handleGameStart = () => {\n      if (gameStarted && questionIndex <= 4) {\n        startNewSet();\n      }\n    };\n  \n    handleGameStart();\n  }, [questionIndex, gameStarted, startNewSet]);\n  \n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = (seconds % 60).toFixed(2);\n    return `${minutes} min ${remainingSeconds} seconds`;\n  };\n\n  const checkSmallestNumber = (selectedNumber, selectedIndex) => {\n    const isSmallest = numbers.every(\n      (number, index) => index === selectedIndex || selectedNumber <= number\n    );\n\n    if (isSmallest) {\n      setResult('YES! You are right!');\n      setCorrectAnswers((prevCorrectAnswers) => prevCorrectAnswers + 1);\n      setCompletedQuestions((prevCompletedQuestions) => prevCompletedQuestions + 1);\n    } else {\n      setResult('OOPS! You are wrong.');\n    }\n\n    setShowResult(true);\n\n    // Clear the previous timeout\n    clearTimeout(resultTimeout.current);\n\n    // Set a new timeout to hide the result after 1 second\n    resultTimeout.current = setTimeout(() => {\n      setShowResult(false);\n      setCompletedQuestions((prevIndex) => prevIndex + 1);\n    }, 1000);\n  };\n\n  const restartGame = () => {\n    setCompletedQuestions(0);\n    setResult('');\n    setCorrectAnswers(0);\n    setStartTime(new Date());\n    setEndTime(null);\n    setGameStarted(true);\n    setShowResult(false); // Reset the showResult state to false\n    startNewSet();\n  };\n\n  const goBack = async () => {\n    try {\n      const token = window.localStorage.getItem('token');\n\n      const response = await fetch('http://localhost:5000/saveCompletedQuestions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          task: 'Task1',\n          completed: questionsCompleted,\n        }),\n      });\n\n      const data = await response.json();\n      console.log(data);\n\n      navigate('/dashboard', { state: { questionsCompleted } });\n    } catch (error) {\n      console.error('Error saving completed questions:', error);\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      {!gameStarted && (\n        <div className=\"game-description\">\n          <h1>Select the Smallest Number</h1>\n          <p>\n            Test your skills by identifying the smallest number in each set of numbers. Click on\n            the number you believe is the smallest. Can you get them all right?\n          </p>\n        </div>\n      )}\n\n      {gameStarted && questionIndex <= 4 && (\n        <div>\n          <p>Select the smallest number !</p>\n          <div className=\"number-buttons\">\n            {numbers.map((number, index) => (\n              <button key={index} onClick={() => checkSmallestNumber(number, index)}>\n                {number}\n              </button>\n            ))}\n          </div>\n          <p>{showResult && result}</p>\n        </div>\n      )}\n\n      {questionIndex === 5 && (\n        <div>\n          <p>Game Over!</p>\n          {endTime && (\n            <div>\n              <p>Total time: {formatTime((endTime - startTime) / 1000)}</p>\n              <p>Your score: {correctAnswers}/5</p>\n              <p>Accuracy: {(correctAnswers / 5) * 100}%</p>\n            </div>\n          )}\n          <button onClick={restartGame}>Restart Game</button>\n          <button onClick={goBack}>Go Back</button>\n        </div>\n      )}\n\n      {!gameStarted && (\n        <div className=\"start-button-container\">\n          <button className=\"start-button\" onClick={restartGame}>\n            Start Game\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SmallestNumberGame;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AACvE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,aAAa,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACiB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM2B,QAAQ,GAAGvB,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMwB,aAAa,GAAGzB,MAAM,CAAC,IAAI,CAAC;EAElCF,SAAS,CAAC,MAAM;IACd,MAAM4B,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MAC1C,IAAI;QACF,MAAMC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAClD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;UAC1EC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACPC,aAAa,EAAG,UAASR,KAAM;UACjC;QACF,CAAC,CAAC;QAEF,IAAI,CAACI,QAAQ,CAACK,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBN,QAAQ,CAACO,MAAO,EAAC,CAAC;QAC3D;QAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,SAAS,KAAKC,SAAS,EAAE;UACxC;UACA3B,qBAAqB,CAACwB,IAAI,CAACE,SAAS,CAAC;QACvC;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D;IACF,CAAC;;IAED;IACAjB,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,CAAChB,aAAa,CAAC,CAAC,CAAC,CAAC;;EAErB;EACAZ,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX+C,YAAY,CAACpB,aAAa,CAACqB,OAAO,CAAC;IACrC,CAAC;IACD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI7B,OAAO,EAAE;MACX,MAAM8B,QAAQ,GAAIpC,cAAc,GAAG,CAAC,GAAI,GAAG;MAC3CH,SAAS,CAAE,0BAAyBG,cAAe,iBAAgBoC,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAE,GAAE,CAAC;IAC5F;EACF,CAAC;EAED,MAAMC,WAAW,GAAGnD,WAAW,CAAC,MAAM;IACpC,IAAIW,aAAa,KAAK,CAAC,EAAE;MACvBS,UAAU,CAAC,IAAIgC,IAAI,CAAC,CAAC,CAAC;MACtBJ,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM;MACL,MAAMK,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAE,CAAC,EAAE,MAAMC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;MACvFnD,UAAU,CAAC6C,UAAU,CAAC;MACtB3C,SAAS,CAAC,EAAE,CAAC;MACbc,aAAa,CAAC,KAAK,CAAC;MACpBN,YAAY,CAAC,IAAIkC,IAAI,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACzC,aAAa,EAAEqC,cAAc,CAAC,CAAC,CAAC,CAAC;;EAErCjD,SAAS,CAAC,MAAM;IACd,MAAM6D,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAIvC,WAAW,IAAIV,aAAa,IAAI,CAAC,EAAE;QACrCwC,WAAW,CAAC,CAAC;MACf;IACF,CAAC;IAEDS,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACjD,aAAa,EAAEU,WAAW,EAAE8B,WAAW,CAAC,CAAC;EAG7C,MAAMU,UAAU,GAAIC,OAAO,IAAK;IAC9B,MAAMC,OAAO,GAAGN,IAAI,CAACC,KAAK,CAACI,OAAO,GAAG,EAAE,CAAC;IACxC,MAAME,gBAAgB,GAAG,CAACF,OAAO,GAAG,EAAE,EAAEZ,OAAO,CAAC,CAAC,CAAC;IAClD,OAAQ,GAAEa,OAAQ,QAAOC,gBAAiB,UAAS;EACrD,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAACC,cAAc,EAAEC,aAAa,KAAK;IAC7D,MAAMC,UAAU,GAAG7D,OAAO,CAAC8D,KAAK,CAC9B,CAACC,MAAM,EAAEC,KAAK,KAAKA,KAAK,KAAKJ,aAAa,IAAID,cAAc,IAAII,MAClE,CAAC;IAED,IAAIF,UAAU,EAAE;MACd1D,SAAS,CAAC,qBAAqB,CAAC;MAChCI,iBAAiB,CAAE0D,kBAAkB,IAAKA,kBAAkB,GAAG,CAAC,CAAC;MACjE5D,qBAAqB,CAAE6D,sBAAsB,IAAKA,sBAAsB,GAAG,CAAC,CAAC;IAC/E,CAAC,MAAM;MACL/D,SAAS,CAAC,sBAAsB,CAAC;IACnC;IAEAc,aAAa,CAAC,IAAI,CAAC;;IAEnB;IACAsB,YAAY,CAACpB,aAAa,CAACqB,OAAO,CAAC;;IAEnC;IACArB,aAAa,CAACqB,OAAO,GAAG2B,UAAU,CAAC,MAAM;MACvClD,aAAa,CAAC,KAAK,CAAC;MACpBZ,qBAAqB,CAAE+D,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;IACrD,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBhE,qBAAqB,CAAC,CAAC,CAAC;IACxBF,SAAS,CAAC,EAAE,CAAC;IACbI,iBAAiB,CAAC,CAAC,CAAC;IACpBI,YAAY,CAAC,IAAIkC,IAAI,CAAC,CAAC,CAAC;IACxBhC,UAAU,CAAC,IAAI,CAAC;IAChBE,cAAc,CAAC,IAAI,CAAC;IACpBE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IACtB2B,WAAW,CAAC,CAAC;EACf,CAAC;EAED,MAAM0B,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMjD,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAElD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8C,EAAE;QAC3EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASR,KAAM;QACjC,CAAC;QACDkD,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,IAAI,EAAE,OAAO;UACbvC,SAAS,EAAE3B;QACb,CAAC;MACH,CAAC,CAAC;MAEF,MAAMyB,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCI,OAAO,CAACqC,GAAG,CAAC1C,IAAI,CAAC;MAEjBf,QAAQ,CAAC,YAAY,EAAE;QAAE0D,KAAK,EAAE;UAAEpE;QAAmB;MAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;EAED,oBACExC,OAAA;IAAKgF,SAAS,EAAC,gBAAgB;IAAAC,QAAA,GAC5B,CAAChE,WAAW,iBACXjB,OAAA;MAAKgF,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BjF,OAAA;QAAAiF,QAAA,EAAI;MAA0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCrF,OAAA;QAAAiF,QAAA,EAAG;MAGH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACN,EAEApE,WAAW,IAAIV,aAAa,IAAI,CAAC,iBAChCP,OAAA;MAAAiF,QAAA,gBACEjF,OAAA;QAAAiF,QAAA,EAAG;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACnCrF,OAAA;QAAKgF,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAC5B9E,OAAO,CAACmF,GAAG,CAAC,CAACpB,MAAM,EAAEC,KAAK,kBACzBnE,OAAA;UAAoBuF,OAAO,EAAEA,CAAA,KAAM1B,mBAAmB,CAACK,MAAM,EAAEC,KAAK,CAAE;UAAAc,QAAA,EACnEf;QAAM,GADIC,KAAK;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNrF,OAAA;QAAAiF,QAAA,EAAI9D,UAAU,IAAId;MAAM;QAAA6E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CACN,EAEA9E,aAAa,KAAK,CAAC,iBAClBP,OAAA;MAAAiF,QAAA,gBACEjF,OAAA;QAAAiF,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAChBtE,OAAO,iBACNf,OAAA;QAAAiF,QAAA,gBACEjF,OAAA;UAAAiF,QAAA,GAAG,cAAY,EAACxB,UAAU,CAAC,CAAC1C,OAAO,GAAGF,SAAS,IAAI,IAAI,CAAC;QAAA;UAAAqE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7DrF,OAAA;UAAAiF,QAAA,GAAG,cAAY,EAACxE,cAAc,EAAC,IAAE;QAAA;UAAAyE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACrCrF,OAAA;UAAAiF,QAAA,GAAG,YAAU,EAAExE,cAAc,GAAG,CAAC,GAAI,GAAG,EAAC,GAAC;QAAA;UAAAyE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CACN,eACDrF,OAAA;QAAQuF,OAAO,EAAEf,WAAY;QAAAS,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnDrF,OAAA;QAAQuF,OAAO,EAAEd,MAAO;QAAAQ,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CACN,EAEA,CAACpE,WAAW,iBACXjB,OAAA;MAAKgF,SAAS,EAAC,wBAAwB;MAAAC,QAAA,eACrCjF,OAAA;QAAQgF,SAAS,EAAC,cAAc;QAACO,OAAO,EAAEf,WAAY;QAAAS,QAAA,EAAC;MAEvD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnF,EAAA,CAzMID,kBAAkB;EAAA,QAULH,WAAW;AAAA;AAAA0F,EAAA,GAVxBvF,kBAAkB;AA2MxB,eAAeA,kBAAkB;AAAC,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}